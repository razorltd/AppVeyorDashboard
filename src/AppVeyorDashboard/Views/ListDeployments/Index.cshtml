@using AppVeyorDashboard.Models.ListDeployments

@model ListDeploymentsModel

<div class="container-fluid">
   @if (!Model.Deployments.Any())
   {
      <div class="alert alert-info">No deployments found.</div>
   }
   else
   {
      <div class="deployments row">
      </div>
   }
</div>

@section Styles
{
   <style>
      body {
         font-size: 16px;
      }

      .container-fluid {
         padding-top: 20px;
         padding-bottom: 20px;
      }
      
      .deployment {
         display: flex;
      }

      .deployment > .alert {
         width: 100%;
      }

      .deployment.running {
         -moz-animation-duration: 2s;
         -moz-animation-iteration-count: infinite;
         -moz-animation-name: blinker;
         -moz-animation-timing-function: linear;
         -webkit-animation-duration: 2s;
         -webkit-animation-iteration-count: infinite;
         -webkit-animation-name: blinker;
         -webkit-animation-timing-function: linear;
         animation-duration: 2s;
         animation-iteration-count: infinite;
         animation-name: blinker;
         animation-timing-function: linear;
      }

      .deployment h3 {
         word-break: break-all;   
      }

      .deployment span.badge {
         display: inline-block;
         overflow: hidden;
      }

      .deployment span.badge.badge-info {
         white-space: nowrap;
         text-overflow: ellipsis;
         max-width: 100%;
      }

      @@keyframes blinker {
         0% {
            opacity: 1.0;
         }

         50% {
            opacity: 0.0;
         }

         100% {
            opacity: 1.0;
         }
      }

      @@-moz-keyframes blinker {
         0% {
            opacity: 1.0;
         }

         50% {
            opacity: 0.0;
         }

         100% {
            opacity: 1.0;
         }
      }

      @@-webkit-keyframes blinker {
         0% {
            opacity: 1.0;
         }

         50% {
            opacity: 0.0;
         }

         100% {
            opacity: 1.0;
         }
      }
   </style>
}

@section Scripts
{
   <script>
      ;
      (function() {
         var statuses = ['running', 'queued', 'failed', 'success'];
         var $deployments = $('.deployments');
         var model = {
            deployments: [
               @foreach (var deployment in Model.Deployments)
               {
                  <text>{ deploymentEnvironmentId: '@deployment.DeploymentEnvironmentId', environmentName: '@deployment.EnvironmentName' },</text>
               }
            ]
         };
         var refresh = function(deployments) {
            deployments.forEach(function(deployment) {
               $.ajax({
                  url: '/deployments/' + encodeURI(deployment.deploymentEnvironmentId),
                  success: function (data) {
                     var $deployment = $('.' + deployment.environmentName.replace(/[^a-zA-z0-9-]/g, '-'));
                     if ($deployment.length) {
                        $deployment.replaceWith(data);
                     } else {
                        $deployments.append(data);
                     }

                     var $divs = $deployments.children('div');
                     var rows = [];
                     $divs.each(function (i, e) {
                        var classNameParts = e.className.split(' ');
                        rows.push({
                           environmentName: classNameParts[0],
                           status: classNameParts[1],
                           finishedAt: classNameParts[2]
                        });
                     });

                     rows.sort(function (a, b) {
                        if (statuses.indexOf(a.status) > statuses.indexOf(b.status)) {
                           return 1;
                        }
                        else if (statuses.indexOf(a.status) < statuses.indexOf(b.status)) {
                           return -1;
                        }
                        else {
                           if (a.finishedAt < b.finishedAt) {
                              return 1;
                           }
                           else if (a.finishedAt > b.finishedAt) {
                              return -1;
                           }
                        }

                        return 0;
                     });

                     rows.forEach(function (row) {
                        $deployments.append($deployments.find('.' + row.environmentName));
                     });
                  }
               });
            });
         };

         refresh(model.deployments);

         setInterval(function() {
            refresh(model.deployments);
         }, 5000);

         setInterval(function() {
            $.ajax({
               url: '@Url.RouteUrl($"ListDeployments{ViewContext.HttpContext.Request.QueryString}")',
               success: function (data) {
                     model = data;
                  }
               });
            },
            5000);
      })();
   </script>
}